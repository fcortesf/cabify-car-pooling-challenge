/*
 * Car pooling API
 *
 * Cabify Car pooling challenge
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using car_pooling_api.Services;
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PeopleApiController : ControllerBase
    { 
        private static readonly string ID_ERROR = "You must specify a valid id.";
        private readonly GroupService groupService;
        public PeopleApiController(GroupService service) {
            groupService = service;
        }
        private bool isIdValid(int? ID) {
            return ID != null && ID.Value > 0;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>A group of people requests to be dropped off. Whether they traveled or not.</remarks>
        /// <param name="ID">A form with the group ID.</param>
        /// <response code="204">No content. When the group is unregistered correctly.</response>
        /// <response code="404">Not Found. When the group is not to be found.</response>
        /// <response code="400">Bad Request. When there is a failure in the request format or the payload can&#39;t be unmarshalled.</response>
        [HttpPost]
        [Route("/dropoff")]
        [ValidateModelState]
        [SwaggerOperation("DropoffPost")]
        public async Task<IActionResult> DropoffPost([FromForm][Required()]int? ID)
        { 
            if (!isIdValid(ID)) return StatusCode(400, ID_ERROR);

            var dropoffResult = await groupService.Dropoff(ID.Value);
            if (dropoffResult) {
                return StatusCode(204);
            }
            else {
                return StatusCode(404, null);
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>A group of people requests to perform a journey.</remarks>
        /// <param name="body">The group of people that wants to perform the journey.</param>
        /// <response code="202">Accepted. When the list is registered correctly.</response>
        /// <response code="400">Bad Request. When there is a failure in the request format or the payload can&#39;t be unmarshalled.</response>
        [HttpPost]
        [Route("/journey")]
        [ValidateModelState]
        [SwaggerOperation("JourneyPost")]
        public async Task<IActionResult> JourneyPost([FromBody]GroupDto body)
        {
            var result = await groupService.Journey(body);
            if (!result) {
                return StatusCode(400, "Duplicated Id");
            }

            return StatusCode(202);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Given a group ID such that ID&#x3D;X, return the car the group is traveling with, or no car if they are still waiting to be served.</remarks>
        /// <param name="ID">A form with the group ID.</param>
        /// <response code="200">OK. With the car as the payload when the group is assigned to a car.</response>
        /// <response code="204">No content. When the group is waiting to be assigned to a car.</response>
        /// <response code="400">Bad Request. When there is a failure in the request format or the payload can&#39;t be unmarshalled.</response>
        /// <response code="404">Not Found. When the group is not to be found.</response>
        [HttpPost]
        [Route("/locate")]
        [ValidateModelState]
        [SwaggerOperation("LocatePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CarDto), description: "OK. With the car as the payload when the group is assigned to a car.")]
        public async Task<IActionResult> LocatePost([FromForm][Required()]int? ID)
        { 
            if (!isIdValid(ID)) return StatusCode(400, ID_ERROR);
            var car = await groupService.Locate(ID.Value);
            if (car == null) {
                return StatusCode(204);
            }
            else if(car.Id > 0) {
                return StatusCode(200, car);
            }
            return  StatusCode(404, null);
        }
    }
}
